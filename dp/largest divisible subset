Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

    answer[i] % answer[j] == 0, or
    answer[j] % answer[i] == 0

If there are multiple solutions, return any of them.
test case:- 
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Input: nums = [1,2,4,8]
Output: [1,2,4,8]

nums =
[1,2,3,8,6,12,16,32]

output = [1,2,8,16,32]

******************************************************************************************************************************************************************
class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        vector<vector<int>> dp(n);

        for(int i=0;i<n;i++){
            dp[i].push_back(nums[i]);
            int kk=0,x=-1;
            for(int j=i-1;j>=0;j--){
                if((nums[i]%nums[j]==0) && (dp[j].size() > kk) ){
                    kk=dp[j].size();
                    x=j;
                    cout<<x;
                }
            }
            if(x!=-1)
            for(auto p : dp[x]) dp[i].push_back(p);
        }
        int max=dp[0].size();
        int k=0;
        for(int i=1;i<n;i++){
            if(dp[i].size()>max){
                max=dp[i].size();
                k=i;
            }
        }
        return dp[k];
    }
};
