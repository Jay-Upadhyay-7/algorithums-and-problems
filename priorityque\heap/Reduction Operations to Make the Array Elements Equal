1887. Reduction Operations to Make the Array Elements Equal
Medium
458
19
Companies

Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:

    Find the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.
    Find the next largest value in nums strictly smaller than largest. Let its value be nextLargest.
    Reduce nums[i] to nextLargest.

Return the number of operations to make all elements in nums equal.
*********************************************************************************************************************************************
Brute Force(optimised) TLE
class Solution {
public:
    int reductionOperations(vector<int>& nums) {
        int count=0;
        int max2=1;
        int max1=nums[0];
        while(max2){
        max1=nums[0];
        int maxi=0;
        for(int i=1;i<nums.size();i++){
            if(nums[i]>max1){
                max1=nums[i];
                maxi=i;
            }
        }
        max2=0;
        int maxi2=-1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<max1&&nums[i]>max2){
                max2=nums[i];
                maxi2=i;
            }
        }
        if(max2){
            nums[maxi]=max2;
            count++;
        }
        }
        return count;
    }
};
**************************************************************************************************************************************************
Using Priority Queue (Optimised)
****
class Solution {
public:
    int reductionOperations(vector<int>& nums) {
        priority_queue<int> pq;
        for(int i=0;i<nums.size();i++){
            pq.push(nums[i]);
        }
        int max1=pq.top();
        int  count=0;
        int c=0;
        int p=0;
        while(!pq.empty()){
           if(pq.top()==max1){
               pq.pop();
               p++;
           }
           else{
               count=count+p;
               max1=pq.top();
               c=0;
           }
        }
        return count;}
};
