class Solution {
public:
    // TC : O(nlogn)+O(n)+O(n)
    // SC: O(n)
    int merge(vector<int>&nums,int beg,int mid,int end){
        int left=beg,right=mid+1;
        int count=0;
        long long int p=2;
        for(int i=beg;i<=mid;i++){
        while(right<=end&&nums[i]>p*nums[right]){
            right++;
        }
        count+= (right-(mid+1));
        }

        vector<int> temp;
        left=beg,right=mid+1;
        while(left<=mid&&right<=end){
            if(nums[left]<=nums[right]){
                temp.push_back(nums[left++]);
            }
            else temp.push_back(nums[right++]);
        }
        while(left<=mid){
            temp.push_back(nums[left++]);
        }
        while(right<=end){
            temp.push_back(nums[right++]);
        }
        for(int i=beg;i<=end;i++){
            nums[i]=temp[i-beg];
        }
        return count;

    }
    int mergesort(vector<int> &nums,int begin,int end){
        if(end<=begin){
            return 0;
        }
        int mid=(begin+end)/2;
        int c=mergesort(nums,begin,mid);
        c+=mergesort(nums,mid+1,end);
        c+=merge(nums,begin,mid,end);
        return c;
    }
    int reversePairs(vector<int>& nums) {
        return mergesort(nums,0,nums.size()-1);
    }
};
