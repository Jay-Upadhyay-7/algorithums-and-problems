// You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

// A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.

// Input format:

// The first line of input contains an integer ‘T’ denoting the number of test cases. Then T test cases follow.

// The first and only line of each test case contains string 'STR'. 

// Output Format

// For each test case, print the subsequences of the string 'STR' separated by space.

// The output of each test case is printed in a separate line.

// The output strings can be returned in any order.

// Sample Input 1:

// 1 
// abc

// Sample Output 1:

// a ab abc ac b bc c

// Explanation of sample input 1:

// All possible subsequences of abc are :  
// “a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”

// Sample Input 2:

// 1
// bbb

// Sample Output 2:

// b b b bb bb bb bbb

// problem link: https://www.codingninjas.com/codestudio/problems/subsequences-of-string_985087?leftPanelTab=0&utm_source=youtube&utm_medium=affiliate&utm_campaign=love_babbar_16




void solve(string str,vector<string> &ans,int index,string output){
    if(index>=str.length()){
        if(output.length()>0){
            ans.push_back(output);
        }
        return;
    }
    //exclude
     solve(str,ans,index+1,output);
    //include
     output.push_back(str[index]);
     solve(str,ans,index+1,output);
}
vector<string> subsequences(string str){
	
	vector<string> ans;
    string output="";
    int index=0;
    solve(str,ans,index,output);
    return ans;
	
}
