A board of length M and width N is given. 
The task is to break this board into M * N squares such that cost of breaking is minimum.
The cutting cost for each edge will be given for the board in two arrays X[] and Y[]. In short, you need to choose such a sequence of cutting such that cost is minimized. 
Return the minimized cost.

Example 1:

Input:
M = 6. N = 4
X[] = {2, 1, 3, 1, 4}
Y[] = {4, 1, 2}
Output: 42

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//{ Driver Code Starts
/* Driver program to test above function */

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function Template for C++

class Solution {
public:
    int minimumCostOfBreaking(vector<int> x, vector<int> y, int M, int N){
        int ans=0;
        int v=1;
        int h=1;
        sort(x.begin(),x.end());
        sort(y.begin(),y.end());
        int i=M-2,j=N-2;
        while(i>=0&&j>=0){
            if(x[i]>=y[j]){
                ans=ans+x[i]*v;
                h++;
                i--;
            }
            else{
                ans=ans+y[j]*h;
                v++;
                j--;
            }
        }
        while(i>=0){
            ans=ans+x[i]*v;
                h++;
                i--;
        }
        while(j>=0){
            ans=ans+y[j]*h;
                v++;
                j--;
        }
        return ans;
        
    }
};



//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int m, n;
	    cin >> m >> n;
	    vector<int>X(m - 1), Y(n - 1);
	    for(int i = 0; i < m - 1; i++){
	        cin >> X[i];
	    }
	    for(int i = 0; i < n - 1; i++){
	        cin >> Y[i];
	    }
	    Solution ob;
	    int ans = ob.minimumCostOfBreaking(X, Y, m, n);
	    cout << ans<<endl;
	}
	return 0;
}

// } Driver Code Ends
